{% extends "layout.html.twig" %}
{% block title %}{{ 'Payer votre commande'|gTrans }}{% endblock %}
{% block head %}
{% endblock %}
{% block content %}
    <h1 class="col-12">{{ 'Payer votre commande'|gTrans }}</h1>
    <div class="bloc-belatika rounded p-2 col-12 col-lg-7 col-xl-8 align-self-start">
        <table class="table table-responsive bloc-belatika-dark m-0">
            <thead>
            <tr>
                <th scope="col">{{ 'Article'|gTrans }}</th>
                <th scope="col">{{ 'Référence'|gTrans }}</th>
                <th scope="col">{{ 'Quantité'|gTrans }}</th>
                <th scope="col">{{ 'Prix unitaire'|gTrans }}</th>
                <th scope="col">{{ 'Sous-total'|gTrans }}</th>
            </tr>
            </thead>
            <tbody>
            {% for line in order.customerOrderLines %}
                <tr>
                    <td data-label="{{ 'Article'|gTrans }}"><a class="belatika-light-link" href="#" target="_blank" title="{{ 'Cliquez pour visualiser dans un nouvel onglet.'|gTrans }}">{% if line.item.images|first.webPath is onDisk %}<img src="{{ line.item.images|first.webPath }}" alt="{{ line.item.images|first.alt }}" height="30" width="30" /> {% endif %}{{ line.item.name }}</a></td>
                    <td data-label="{{ 'Référence'|gTrans }}">{{ line.item.reference }}</td>
                    <td data-label="{{ 'Quantité'|gTrans }}">
                        {{ line.quantity }}
                    </td>
                    <td data-label="{{ 'Prix unitaire'|gTrans }}">{{ line.discountPrice|number_format(2, ',') }}€</td>
                    <td data-label="{{ 'Sous-total'|gTrans }}">
                        {{ (line.discountPrice * line.quantity)|number_format(2, ',') }}€
                    </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
    <div class="col-12 col-lg-5 col-xl-4 bloc-belatika p-2 rounded align-self-start">
        <div class='bloc-belatika-dark rounded p-2'>
            {% if order.giftValueUsed > 0 %}
                <p class="d-flex justify-content-between">
                    <span>{{ 'Sous-total'|gTrans }} :</span>
                    <span>{{ order.total|number_format(2, ',', ' ') }}€</span>
                </p>
                <p class="d-flex justify-content-between">
                    <span>{{ 'Chèque-cadeau'|gTrans }} :</span>
                    <span>-{{ order.giftValueUsed|number_format(2, ',', ' ') }}€</span>
                </p>
            {% endif %}
            <p class='d-flex justify-content-between'>
                <span>{{ 'Total'|gTrans }} :</span>
                <span>{{ (order.total - order.giftValueUsed)|number_format(2, ',') }}€</span>
            </p>
            <p><em>{{ 'T.V.A. non applicable art. 293 B du CGI'|gTrans }}</em></p>
            <hr>
            <p class="d-flex justify-content-between align-items-center">
                <span>{{ 'Paiement sécurisé'|gTrans }}</span>
                <span class="flex-1"><img class="img-fluid" src="{{ asset('img/resources/stripe-logo.png') }}" alt="{{ 'Cartes de paiements'|gTrans }}"></span>
            </p>
            <form action="{{ path('app_payment_stripe') }}" method="post" id="payment-form">
                <div class="form-group">
                    <div class="bg-light rounded p-2" id="card-element"></div>
                    <div id="card-errors" role="alert"></div>
                </div>
                <button class="btn btn-belatika-light w-100"><i class="far fa-credit-card"></i> {{ 'Régler ma commande' }}</button>
            </form>
            <hr>
            <p>{{ 'Payer avec un compte Paypal' }}</p>
            <a href="{{ path('app_payment_paypal') }}" class="btn btn-belatika-light">Paypal</a>
        </div>
    </div>
{%  endblock %}


{% block javascripts %}
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        $(function() {
            // Create a Stripe client.
            var stripe = Stripe('{{ stripe_public_key }}', {locale: '{{ app.request.locale }}'});

            // Create an instance of Elements.
            var elements = stripe.elements();

            // Custom styling can be passed to options when creating an Element.
            var style = {
                base: {
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                },
                invalid: {
                    color: 'red',
                    iconColor: 'red'
                },
            };

            // Create an instance of the card Element.
            var card = elements.create('card', {style: style});

            // Add an instance of the card Element into the `card-element` <div>.
            card.mount('#card-element');

            // Handle real-time validation errors from the card Element.
            var displayError = document.getElementById('card-errors');
            card.addEventListener('change', function(event) {
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });

            // Handle form submission.
            var form = document.getElementById('payment-form');
            form.addEventListener('submit', function(event) {
                event.preventDefault();

                stripe.createToken(card).then(function(result) {
                    if (result.error) {
                        // Inform the user if there was an error.
                        var errorElement = document.getElementById('card-errors');
                        errorElement.textContent = result.error.message;
                    } else {
                        // Send the token to your server.
                        stripeTokenHandler(result.token);
                    }
                });
            });

            function stripeTokenHandler(token){
                var form = document.getElementById('payment-form');
                var hiddenInput = document.createElement('input');
                hiddenInput.setAttribute('type', 'hidden');
                hiddenInput.setAttribute('name', 'stripeToken');
                hiddenInput.setAttribute('value', token.id);
                form.appendChild(hiddenInput);

                form.submit();
            }
        });
    </script>
{% endblock %}